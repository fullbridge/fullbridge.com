$font-stack:
  (group: body, id: regular, font: ($body-font), weight: 300, style: normal),
  (group: body, id: italic, font: ($body-font), weight: 300, style: italic),
  (group: body, id: bold, font: ($body-font), weight: 700, style: normal),
  (group: body, id: bold-italic, font: ($body-font), weight: 700, style: italic),
  (group: heading, id: regular, font: ($heading-font), weight: 400, style: normal),
  (group: heading, id: bold, font: ($heading-font), weight: 400, style: normal),
  (group: code, id: regular, font: ($monospace-font), weight: 400, style: normal);

@mixin font($group, $id:regular){
  @each $font in $font-stack{
    @if($group == map-get($font, group) and $id == map-get($font, id)){
      font-family: map-get($font, font);
      font-weight: map-get($font, weight);
      font-style: map-get($font, style);
    }
  }
}

@mixin bp($min: 0, $max: 0)
{
  $type: type-of($min);

  @if $type == string {
    @if $min == small {
      @media only screen and (max-width: $small-screen) { @content; }
    }

    @else if $min == medium {
      @media only screen and (min-width: ($small-screen + 1px)) and (max-width: $medium-screen) { @content; }
    }

    @else if $min == large {
      @media only screen and (min-width: ($medium-screen + 1px)) { @content; }
    }

    @else if $min == desktop {
      @media only screen and (min-width: ($small-screen + 1px)) { @content; }
    }

    // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @warn "The breakpoint mixin supports the following attributes: desktop, small, medium, large";
    }
  }
  @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if      $min != 0 and $max != 0 { $query: "(min-width: #{$min}) and (max-width: #{$max})"; } // set both min and max
    @else if $min != 0 and $max == 0 { $query: "(min-width: #{$min})"; } // set just min
    @else if $min == 0 and $max != 0 { $query: "(max-width: #{$max})"; } // set just max
    @media #{$query} { @content; }
  }
}

@mixin orientation-portrait
{
  @media screen and (orientation: portrait) {
    @content;
  }
}

@mixin orientation-landscape
{
  @media screen and (orientation: landscape) {
    @content;
  }
}

@mixin underline($pos, $width, $color:rgba(0,0,0,1), $bg:rgb(0,0,0) ) {
  @include background-image(linear-gradient(top,
    rgba($bg,0) $pos,
    $color $pos,
    $color $pos+$width,
    rgba($bg,0) $pos+$width
   )
  );
  background-size: 2px 2em;
  background-repeat: repeat-x;
  /* Set your wanted text-shadow here */
  text-shadow:
   2px  2px 0px $bg,
   2px -2px 0px $bg,
  -2px  2px 0px $bg,
  -2px -2px 0px $bg,
   0px  2px 0px $bg,
   0px -2px 0px $bg;
}

@mixin even-grid($colspan)
{
  width: calc(#{100%/$colspan} - #{$gutter*($colspan - 1)/$colspan});
}

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

@mixin antialiased
{
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale !important;
  -webkit-font-smoothing: antialiased !important;
  font-smoothing: antialiased !important;
}

@mixin ligatures
{
  -moz-font-feature-settings: "liga", "dlig";
  -ms-font-feature-settings: "liga", "dlig";
  -o-font-feature-settings: "liga", "dlig";
  -webkit-font-feature-settings: "liga", "dlig";
  font-feature-settings: "liga", "dlig";
}

@mixin kerning
{
  -moz-font-feature-settings: "kern";
  -ms-font-feature-settings: "kern";
  -o-font-feature-settings: "kern";
  -webkit-font-feature-settings: "kern";
  font-feature-settings: "kern";
  font-kerning: normal; /* Safari 7+, Firefox 24+, Chrome 33(?)+, Opera 21+*/
}

@mixin border-box
{
  -moz-box-sizing: border-box !important;
  -webkit-box-sizing: border-box !important;
  box-sizing: border-box !important;
}

@mixin truncate
{
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin opacity($opacity)
{
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin text-align($text-align)
{
  @if $text-align == right {
    text-align: right;

    [dir=rtl] &
    {
      text-align: left;
    }
  }

  @if $text-align == left {
    text-align: left;

    [dir=rtl] &
    {
      text-align: right;
    }
  }

  @if $text-align == center {
    text-align: center;
  }
}

@mixin margin($margin-top, $margin-right, $margin-bottom, $margin-left)
{
  margin-top: $margin-top;
  margin-right: $margin-right;
  margin-bottom: $margin-bottom;
  margin-left: $margin-left;

  [dir=rtl] &
  {
    margin-right: $margin-left;
    margin-left: $margin-right;
  }
}

@mixin padding($padding-top, $padding-right, $padding-bottom, $padding-left)
{
  padding-top: $padding-top;
  padding-right: $padding-right;
  padding-bottom: $padding-bottom;
  padding-left: $padding-left;

  [dir=rtl] &
  {
    padding-right: $padding-left;
    padding-left: $padding-right;
  }
}

@mixin position($pos, $pos-top, $pos-right, $pos-bottom, $pos-left)
{
  position: $pos;
  top: $pos-top;
  right: $pos-right;
  bottom: $pos-bottom;
  left: $pos-left;

  [dir=rtl] &
  {
    right: $pos-left;
    left: $pos-right;
  }
}

@mixin float($float)
{
  @if $float == left {
    float: left;

    [dir=rtl] &
    {
      float: right;
    }
  }

  @if $float == right {
    float: right;

    [dir=rtl] &
    {
      float: left;
    }
  }
}

@mixin border($border-dir, $border-styles)
{
  @if $border-dir == left {
    border-left: $border-styles;

    [dir=rtl] &
    {
      border-right: auto;
      border-left: $border-styles;
    }
  }

  @if $border-dir == right {
    border-left: $border-styles;

    [dir=rtl] &
    {
      border-right: $border-styles;
      border-left: auto;
    }
  }
}

@mixin triangle-up($sides, $bottom, $color)
{
  width: 0;
  height: 0;
  content: "";
  border-top: none;
  border-right: $sides solid transparent;
  border-bottom: $bottom solid $color;
  border-left: $sides solid transparent;
}

@mixin triangle-down($sides, $bottom, $color)
{
  width: 0;
  height: 0;
  content: "";
  border-top: $bottom solid $color;
  border-right: $sides solid transparent;
  border-bottom: none;
  border-left: $sides solid transparent;
}

@mixin break-all
{
  // Warning: Needed for oldIE support, but words are broken up letter-by-letter
  -ms-word-break: break-all;
  word-break: break-all;

  // Non standard for webkit
  word-break: break-word;

  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
}

@mixin justify-text
{
  text-align: justify;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
  -webkit-hyphenate-limit-lines: 2;
  -moz-hyphenate-limit-lines: 2;
  -ms-hyphenate-limit-lines: 2;
  hyphenate-limit-lines: 2;
  -webkit-hyphenate-limit-chars: 6 3 2;
  -moz-hyphenate-limit-chars: 6 3 2;
  -ms-hyphenate-limit-chars: 6 3 2;
  hyphenate-limit-chars: 6 3 2;
  -webkit-hyphenate-limit-last: always;
  -moz-hyphenate-limit-last: always;
  -ms-hyphenate-limit-last: always;
  hyphenate-limit-last: always;
}

@mixin vertical-scroll
{
  overflow-x: hidden;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
}

@mixin horizontal-scroll
{
  overflow-y: hidden;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

@mixin visuallyhidden
{
    position: absolute;
    width: 1px;
    height: 1px;
    overflow: hidden;
    margin: -1px;
    padding: 0;
    border: 0;
    clip: rect(0 0 0 0);

    &.focusable:active,
    &.focusable:focus
    {
        clip: auto;
        height: auto;
        margin: 0;
        overflow: visible;
        position: static;
        width: auto;
    }
}

@mixin small-diamond
{
  @include transform(rotate(45deg));

  width: 5px;
  height: 5px;
  content: "";
  background-color: $body-text-color;
  box-shadow:
    -1px 1px 0 $background-color,
    -1px -1px 0 $background-color,
    1px -1px 0 $background-color,
    1px 1px 0 $background-color,
    -2px 2px 0 $background-color,
    -2px -2px 0 $background-color,
    2px -2px 0 $background-color,
    2px 2px 0 $background-color,
    -3px 3px 0 $background-color,
    -3px -3px 0 $background-color,
    3px -3px 0 $background-color,
    3px 3px 0 $background-color;
}

@mixin background-image-retina($file, $type) {
  background-image: url($file + '.' + $type);
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (-moz-min-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx){
    & {
      background-image: url($file + '@2x.' + $type);
    }
  }
}

@mixin additional-typography
{
  a
  {
    &:visited
    {
      color: $body-text-color;
    }

    &:hover
    {
      color: $link-color;
    }

    &:visited:hover
    {
      color: $link-visited-color;
    }

    &:active
    {
      color: $link-visited-color;
    }

    &:link:after
    {
      @include position(relative,-.6em,auto,auto,auto);
      @include padding(0,0,0,2px);

      content: "\2299";
      font-size: .6em;
      font-style: normal;
      text-shadow: none;
    }

    &[target="_blank"]:after
    {
      content: "\290F";
    }
  }

  * + p
  {
    @include bp(small)
    {
      text-indent: $gutter/2;
    }

    @include bp(desktop)
    {
      text-indent: $gutter/1.5;
    }
  }

  header + p,
  header + *:not(p) + p,
  h1 + p,
  h1 + *:not(p) + p,
  h2 + p,
  h2 + *:not(p) + p,
  h3 + p,
  h3 + *:not(p) + p,
  h4 + p,
  h4 + *:not(p) + p,
  h5 + p,
  h5 + *:not(p) + p,
  h6 + p,
  h6 + *:not(p) + p
  {
    text-indent: 0;
  }

  p
  {
    @include margin(0,auto,0,auto);

    &:first-of-type
    {
      text-indent: 0;
    }

    &:first-child
    {
      @include margin(($paragraph-spacing + em),auto,0,auto);
    }
  }

  abbr,
  span[data-tip]
  {
    a:after
    {
      content: "\2139" !important;
    }
  }

  figure,
  blockquote,
  pre
  {
    @include margin(($paragraph-spacing*1.4 + em),auto,($paragraph-spacing*1.4 + em),auto);
  }

  figure
  {
    > a,
    img
    {
      border: none;
      text-shadow: none;
      background-image: none;
    }

    > a:after
    {
      display: none;
    }

    img
    {
      max-width: 100%;
    }

    > div
    {
      @include position(relative,auto,auto,auto,auto);
      @include padding(30px,auto,56.25%,auto);

      height: 0;
      overflow: hidden;

      iframe,object,embed
      {
        @include position(absolute,0,auto,auto,0);

        width: 100%;
        height: 100%;
      }
    }

    figcaption
    {
      @include font(heading,regular);
    }

    * + figcaption
    {
      @include margin(($paragraph-spacing/2 + em),auto,auto,auto);
    }
  }

  blockquote
  {
    @include position(relative,auto,auto,auto,auto);
    @include font(heading,bold);
    @include border(left, $border);

    line-height: ($leading*.845);

    @include bp(small)
    {
      @include padding(0,0,0,($gutter/2));
    }

    @include bp(desktop)
    {
      @include padding(0,0,0,$gutter);
    }

    &:before,
    &:after
    {
      line-height: 1;
      background-color: $background-color;
    }

    &:before
    {
      @include position(absolute,-.5em,auto,auto,-.4em);

      content: "\275D";
    }

    &:after
    {
      @include position(absolute,auto,auto,-.9em,-.4em);
      @include padding(.4em,0,0,0);

      content: "\275E";
    }

    > *
    {
      font-size: $large-font-size + em;
    }
  }

  pre
  {
    @include horizontal-scroll;

    background-color: $body-text-color;

    code
    {
      @include margin(0,($gutter/2/$small-font-size),0,($gutter/2/$small-font-size));

      display: block;
      line-height: 1.2;
      letter-spacing: .1em;
      font-size: .8em;

      &:before,
      &:after
      {
        display: block;
        height: $paragraph-spacing + em;
        content: "";
      }
    }
  }
}
